Lesson 10 Password Reset Testing

1 - Create integration test for password reset

	rails generate integration_test password_resets

2 - Implement the integration test

    class PasswordResetsTest < ActionDispatch::IntegrationTest
      def setup
        ActionMailer::Base.deliveries.clear
        @user = users(:bruno)
      end

      test "password resets" do
        get new_password_reset_path
        assert_template 'password_resets/new'

        # Invalid email
        post password_resets_path, password_reset: { email: "" }
        assert_not flash.empty?
        assert_template 'password_resets/new'

        # Valid email
        post password_resets_path, password_reset: { email: @user.email }
        assert_not_equal @user.reset_digest, @user.reload.reset_digest
        assert_equal 1, ActionMailer::Base.deliveries.size
        assert_not flash.empty?
        assert_redirected_to root_url

        # Password reset form
        user = assigns(:user)

        # Wrong email
        get edit_password_reset_path(user.reset_token, email: "")
        assert_redirected_to root_url

        # Inactive user
        user.toggle!(:activated)
        get edit_password_reset_path(user.reset_token, email: user.email)
        assert_redirected_to root_url
        user.toggle!(:activated)

        # Right email, wrong token
        get edit_password_reset_path('wrong token', email: user.email)
        assert_redirected_to root_url

        # Right email, right token
        get edit_password_reset_path(user.reset_token, email: user.email)
        assert_template 'password_resets/edit'
        assert_select "input[name=email][type=hidden][value=?]", user.email

        # Invalid password & confirmation
        patch password_reset_path(user.reset_token), 
                email: user.email,
                user: { password: "foobar2",
                        password_confirmation: "barfoor1" }
        assert_select "div#error_explanation"

        # Blank password & confirmation
        patch password_reset_path(user.reset_token),
                email: user.email,
                user: { password: "  ",
                        password_confirmation: "  " }
        assert_not flash.empty?
        assert_template 'password_resets/edit'

        # Valid password & confirmation
        patch password_reset_path(user.reset_token),
                email: user.email,
                user: { password: "foobar2",
                        password_confirmation: "foobar2" }
        assert is_logged_in?
        assert_not flash.empty?
        assert_redirected_to user

      end
    end

3 - Modify Password Resets Controller - ./controllers/password_resets_controller.rb

    3.1 - Modify before actions

        before_action :get_user, only: [:edit, :update]  
        before_action :valid_user, only: [:edit, :update]
        before_action :check_expiration, only: [:edit, :update]

    3.2 - Modify update action

        def update

            if both_passwords_blank?
                flash.now[:danger] = "Password/confirmation can't be blank"
                render 'edit'
            elsif @user.update_attributes(user_params)
                flash[:success] = "Password has been reset"
                log_in @user
                redirect_to @user
            else
                render 'edit'
            end
        end

    3.3 - Add new private methods

        private

        def user_params
            params.require(:user).permit(:password, :password_confirmation)
        end

        # Returns true if password & password confirmation are blank
        def both_passwords_blank?
            params[:user][:password].blank? && params[:user][:password_confirmation].blank?
        end

        # Before filters

        def get_user
            @user = User.find_by(email: params[:email])
        end

        def valid_user
            unless (@user && @user.activated? && @user.authenticated?(:reset, params[:id]))
                redirect_to root_url
            end      
        end

        # Checks expiration of reset token
        def check_expiration
            if @user.password_reset_expired?
                flash[:dange] = "Password reset has expired"
                redirect_to new_password_reset_url
            end
        end