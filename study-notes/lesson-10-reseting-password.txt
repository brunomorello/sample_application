Lesson 10 Reseting Password

1 - Create the View for Password Reset on edit.html.erb

	<% provide(:title, "Reset Password") %>
	<h1>Reset Password</h1>

	<div class="row">
		<div class="col-md-6 col-md-offset-3">
			<%= form_for(@user) do |f| %>
				<%= render 'shared/error_messages' %>

				<%= hidden_field_tag :email, @user.email %>

				<%= f.label :password %>
				<%= f.password_field :password, class: 'form-control' %>

				<%= f.label :password_confirmation %>
				<%= f.password_field :password_confirmation, class: 'form-control' %>

				<%= f.submit "Update Password", class: 'btn btn-primary' %>
			<% end %>
		</div>
	</div>

2 - Improve the password_resets_controller.rb

	2.1 - Create the private methods - get_user and user_params

	private

		def user_params
      		params.require(:user).permit(:password, :password_confirmation)
    	end

		def get_user
			@user = User.find_by(email: params[:email])
			unless (@user && @user.activated? && @user.authenticated?(:reset, params[:id]))
        		redirect_to root_url
      		end
		end	

	2.2 - Add a before_action using method get_user

		before_action :get_user, only: [:edit, :update]  

	2.3 - Create a new action to update

  	def update

		if @user.password_reset_expired?

	  		flash[:dange] = "Password reset has expired"
	  		redirect_to new_password_reset_url

		elsif (params[:user][:password].blank? && params[:user][:password_confirmation].blank?)

		  	flash.now[:danger] = "Password/confirmation can't be blank"
	  		render 'edit'

		elsif @user.update_attributes(user_params)

	  		flash[:success] = "Password has been reset"
	  		log_in @user
	  		redirect_to @user

		else

	  		render 'edit'      

		end
	end

	2.4 - Create the method password_reset_expired? on models/user.rb

	# Returns true if a password reset has expired
	def password_reset_expired?
		reset_sent_at < 2.hours.ago		
	end