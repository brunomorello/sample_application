Lesson 11 Micropost Images

1 - Generate a uploader called Picture
    
    rails generate uploader Picture

2 - Add a new feature on micropost, upload a picture

    2.1 - Generate migration

        rails generate migration add_picture_to_microposts picture:string

    2.2 - Execute migration

        rake db:migrate

    2.3 - Add the mount_uploader in Micropost Model

      # Use Staby Lambda
      default_scope -> { order(created_at: :desc) }

      # Uploader
      mount_uploader :picture, PictureUploader        

    2.4 - Modify the partial _micropost_form_html.erb

        <%= form_for(@micropost, html: { multipart: true }) do |f| %>
            <%= render 'shared/error_messages', object: f.object %>

            <div class="field">
                <%= f.text_area :content, placeholder: "Compose new micrpost..." %>
            </div>

            <%= f.submit "Post", class: "btn btn-primary" %>

            <span class="picture">
                <%= f.file_field :picture, accept: 'image/jpeg,image/gif,image/png' %>
            </span>
        <% end %>

    2.5 - Permit/Add the Picture attribute in whitelist on micropost controller

        params.require(:micropost).permit(:content, :picture)

    2.6 - Modify the partial _micropost.html.erb to show Picture if exist any

        <!-- inside span class content -->
            <%= image_tag micropost.picture.url if micropost.picture? %>

    2.7 - Uncomment the whitelist in picture_uploader, include CarrierWave and Environment Validation to store pictures

        include CarrierWave::MiniMagick
        process resize_to_limit: [400, 400]

        # Choose what kind of storage to use for this uploader:
        if Rails.env.production?
            storage :fog
        else
            storage :file
        end        

        # Add a white list of extensions which are allowed to be uploaded.
        # For images you might use something like this:
        def extension_white_list
            %w(jpg jpeg gif png)
        end

    2.8 - Validate the upload size on micropost model

        validate :picture_size

        2.8.1 - Create the private method picture_size

            def picture_size
                if picture.size > 5.megabytes
                    errors.add(:picture, "should be less than 5MB")
                end
            end        

    2.9 - Add a Jquery to partial _micropost_form.html.erb to validate immediately

        <script type="text/javascript">
            $('#micropost_picture').bind('change', function() {
                size_in_megabytes = this.files[0].size/1024/1024;
                if (size_in_megabytes > 5) {
                    alert('Maxium file size is 5MB. Please choose a smaller file');
                }
            });
        </script>

        it don't prevent users to upload files bigger than 5mb. Back do it!

    2.10 - Create a initializer for carrier_wave on config/initializers/carrier_wave.rb - To user Amazon S3

        if Rails.env.production?
            CarrierWave.configure do |config|
                config.flag_credentials = {
                    # Configuration for Amazon S3
                    :provider              => 'AWS',
                    :aws_access_key_id     => ENV['S3_ACCESS_KEY'],
                    :aws_secret_access_key => ENV['S3_SECRET_KEY']
                }
                config.flag_directory = ENV['S3_BUCKET']
            end
        end    

3 - Commit and deploy